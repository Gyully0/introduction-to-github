import React, { useState } from 'react';
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '@/components/ui/card';
import { Label, Input } from '@/components/ui/forms';
import { Button } from '@/components/ui/button';

const RescisionSimulator = () => {
  const [companyName, setCompanyName] = useState('');
  const [employeeName, setEmployeeName] = useState('');
  const [terminationType, setTerminationType] = useState('');
  const [salary, setSalary] = useState('');
  const [hireDate, setHireDate] = useState('');
  const [endDate, setEndDate] = useState('');

  const [result, setResult] = useState(null);

  const calculateRescision = () => {
    // Perform calculations based on the user input
    const workingMonths = Math.ceil((new Date(endDate) - new Date(hireDate)) / (1000 * 60 * 60 * 24 * 30.4375));
    const salaryPerMonth = parseFloat(salary) / 30.4375;
    const proportionalSalary = salaryPerMonth * workingMonths;
    const thirteenthSalary = salaryPerMonth * (workingMonths / 12);
    const vacationDays = (workingMonths / 12) * 30;
    const vacationSalary = (salaryPerMonth * vacationDays) / 30;
    const vacationOneThird = salaryPerMonth * (vacationDays / 30) / 3;
    const fgtsMultiplier = terminationType === 'dismissal' ? 0.4 : 0.2;
    const fgtsBalance = parseFloat(salary) * workingMonths / 36.5 * fgtsMultiplier;

    const subtotal = proportionalSalary + thirteenthSalary + vacationSalary + vacationOneThird;
    const total = subtotal + fgtsBalance;

    setResult({
      proportionalSalary,
      thirteenthSalary,
      vacationSalary,
      vacationOneThird,
      fgtsBalance,
      subtotal,
      total
    });
  };

  return (
    <Card className="w-full max-w-xl">
      <CardHeader>
        <CardTitle>Rescision Calculation Simulator</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-2 gap-4">
          <div>
            <Label htmlFor="company-name">Company Name</Label>
            <Input id="company-name" value={companyName} onChange={(e) => setCompanyName(e.target.value)} />
          </div>
          <div>
            <Label htmlFor="employee-name">Employee Name</Label>
            <Input id="employee-name" value={employeeName} onChange={(e) => setEmployeeName(e.target.value)} />
          </div>
          <div>
            <Label htmlFor="termination-type">Termination Type</Label>
            <Input id="termination-type" value={terminationType} onChange={(e) => setTerminationType(e.target.value)} />
          </div>
          <div>
            <Label htmlFor="salary">Salary</Label>
            <Input id="salary" value={salary} onChange={(e) => setSalary(e.target.value)} />
          </div>
          <div>
            <Label htmlFor="hire-date">Hire Date</Label>
            <Input id="hire-date" type="date" value={hireDate} onChange={(e) => setHireDate(e.target.value)} />
          </div>
          <div>
            <Label htmlFor="end-date">End Date</Label>
            <Input id="end-date" type="date" value={endDate} onChange={(e) => setEndDate(e.target.value)} />
          </div>
        </div>
      </CardContent>
      <CardFooter>
        <Button onClick={calculateRescision}>Calculate Rescision</Button>
      </CardFooter>

      {result && (
        <Card className="mt-4">
          <CardHeader>
            <CardTitle>Rescision Calculation Result</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <div>Proportional Salary: {result.proportionalSalary.toFixed(2)}</div>
                <div>13th Salary: {result.thirteenthSalary.toFixed(2)}</div>
                <div>Vacation Salary: {result.vacationSalary.toFixed(2)}</div>
                <div>1/3 Vacation: {result.vacationOneThird.toFixed(2)}</div>
              </div>
              <div>
                <div>FGTS Balance: {result.fgtsBalance.toFixed(2)}</div>
                <div>Subtotal: {result.subtotal.toFixed(2)}</div>
                <div>Total: {result.total.toFixed(2)}</div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </Card>
  );
};

export default RescisionSimulator;
